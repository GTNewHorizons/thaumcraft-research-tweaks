/* DO NOT OVERWRITE THIS WITH THE UNIFIED BUILDSCRIPT IT DOESN'T HANDLE KOTLIN MIXINS */

import org.gradle.internal.logging.text.StyledTextOutput
import org.gradle.internal.logging.text.StyledTextOutputFactory
import org.gradle.internal.logging.text.StyledTextOutput.Style

import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        maven {
            name = 'Overmind forge repo mirror'
            url = 'https://gregtech.overminddl1.com/'
        }
        maven {
            name = 'forge'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name = 'jitpack'
            url = 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.7.1'
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'        version '1.5.30'
    id 'org.jetbrains.kotlin.kapt'       version '1.5.30'
    id 'org.ajoberstar.grgit'            version '4.1.1'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'com.palantir.git-version'        version '0.13.0' apply false
    id 'de.undercouch.download'          version '5.0.1'
}

if (project.file('.git/HEAD').isFile()) {
    apply plugin: 'com.palantir.git-version'
}

apply plugin: 'forge'

def projectJavaVersion = JavaLanguageVersion.of(8)

java {
    toolchain {
        languageVersion.set(projectJavaVersion)
    }
}

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
    throw new GradleException("This project requires Java 8, but it's running on " + JavaVersion.current())
}

checkPropertyExists("modName")
checkPropertyExists("modId")
checkPropertyExists("modGroup")
checkPropertyExists("autoUpdateBuildScript")
checkPropertyExists("minecraftVersion")
checkPropertyExists("forgeVersion")
checkPropertyExists("replaceGradleTokenInFile")
checkPropertyExists("gradleTokenModId")
checkPropertyExists("gradleTokenModName")
checkPropertyExists("gradleTokenVersion")
checkPropertyExists("gradleTokenGroupName")
checkPropertyExists("apiPackage")
checkPropertyExists("accessTransformersFile")
checkPropertyExists("usesMixins")
checkPropertyExists("mixinPlugin")
checkPropertyExists("mixinsPackage")
checkPropertyExists("coreModClass")
checkPropertyExists("containsMixinsAndOrCoreModOnly")
checkPropertyExists("usesShadowedDependencies")
checkPropertyExists("developmentEnvironmentUserName")

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)

    // Make sure GregTech build won't time out
    System.setProperty("org.gradle.internal.http.connectionTimeout", 120000 as String)
    System.setProperty("org.gradle.internal.http.socketTimeout", 120000 as String)
}

// Fix Jenkins' Git: chmod a file should not be detected as a change and append a '.dirty' to the version
try {
    'git config core.fileMode false'.execute()
}
catch (Exception e) {
    out.style(Style.Failure).println("git isn't installed at all")
}

// Pulls version first from the VERSION env and then git tag
String identifiedVersion
String versionOverride = System.getenv("VERSION") ?: null
try {
    identifiedVersion = versionOverride == null ? gitVersion() : versionOverride
}
catch (Exception e) {
    out.style(Style.Failure).text(
            'This mod must be version controlled by Git AND the repository must provide at least one tag,\n' +
            'or the VERSION override must be set! ').style(Style.SuccessHeader).text('(Do NOT download from GitHub using the ZIP option, instead\n' +
            'clone the repository, see ').style(Style.Info).text('https://gtnh.miraheze.org/wiki/Development').style(Style.SuccessHeader).println(' for details.)'
    )
    versionOverride = 'NO-GIT-TAG-SET'
    identifiedVersion = versionOverride
}
version = minecraftVersion + '-' + identifiedVersion
String modVersion = identifiedVersion

if( identifiedVersion.equals(versionOverride) ) {
    out.style(Style.Failure).text('Override version to ').style(Style.Identifier).text(modVersion).style(Style.Failure).println('!\7')
}

group = modGroup
if(project.hasProperty("customArchiveBaseName") && customArchiveBaseName) {
    archivesBaseName = customArchiveBaseName
}
else {
    archivesBaseName = modId
}

def arguments = []
def jvmArguments = []

if(usesMixins.toBoolean()) {
    arguments += [
            "--tweakClass org.spongepowered.asm.launch.MixinTweaker"
    ]
    jvmArguments += [
            "-Dmixin.debug.countInjections=true", "-Dmixin.debug.verbose=true", "-Dmixin.debug.export=true"
    ]
}

minecraft {
    version = minecraftVersion + "-" + forgeVersion + "-" + minecraftVersion
    runDir = "run"

    if (replaceGradleTokenInFile) {
        replaceIn replaceGradleTokenInFile
        if(gradleTokenModId) {
            replace gradleTokenModId, modId
        }
        if(gradleTokenModName) {
            replace gradleTokenModName, modName
        }
        if(gradleTokenVersion) {
            replace gradleTokenVersion, modVersion
        }
        if(gradleTokenGroupName) {
            replace gradleTokenGroupName, modGroup
        }
    }

    clientIntellijRun {
        args(arguments)
        jvmArgs(jvmArguments)

        if(developmentEnvironmentUserName) {
            args("--username", developmentEnvironmentUserName)
        }
    }

    serverIntellijRun {
        args(arguments)
        jvmArgs(jvmArguments)
    }
}

if(file("addon.gradle").exists()) {
    apply from: "addon.gradle"
}

apply from: 'repositories.gradle'

configurations {
    implementation.extendsFrom(shadowImplementation)  // TODO: remove after all uses are refactored
    implementation.extendsFrom(shadowCompile)
    implementation.extendsFrom(shadeCompile)
}

repositories {
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
    if(usesMixins.toBoolean()) {
        maven {
            name 'sponge'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

dependencies {
    if(usesMixins.toBoolean()) {
        annotationProcessor('org.ow2.asm:asm-debug-all:5.0.3')
        annotationProcessor('com.google.guava:guava:24.1.1-jre')
        annotationProcessor('com.google.code.gson:gson:2.8.6')
        annotationProcessor('org.spongepowered:mixin:0.8-SNAPSHOT')
        // using 0.8 to workaround a issue in 0.7 which fails mixin application
        compile('com.github.GTNewHorizons:SpongePoweredMixin:0.7.12-GTNH') {
            // Mixin includes a lot of dependencies that are too up-to-date
            exclude module: 'launchwrapper'
            exclude module: 'guava'
            exclude module: 'gson'
            exclude module: 'commons-io'
            exclude module: 'log4j-core'
        }
        compile('com.github.GTNewHorizons:SpongeMixins:1.5.0')
    }
}

apply from: 'dependencies.gradle'

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace modVersion and minecraftVersion
        expand "minecraftVersion": project.minecraft.version,
            "modVersion": modVersion,
            "modId": modId,
            "modName": modName
    }

    // copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("dev")
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

artifacts {
    archives devJar
    archives sourcesJar
}

def mixinConfigJson = "mixins.${modId}.json"
def mixingConfigRefMap = "mixins.${modId}.refmap.json"
def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + mixingConfigRefMap
def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes([
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : mixinConfigJson,
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod"             : true
        ])
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

kapt {
    correctErrorTypes = true
    javacOptions {
        option("-AreobfSrgFile=${tasks.reobf.srg}")
        option("-AoutSrgFile=$mixinSrg")
        option("-AoutRefMapFile=$refMap")
    }
}

afterEvaluate {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

runClient {
    if(developmentEnvironmentUserName) {
        arguments += [
                "--username",
                developmentEnvironmentUserName
        ]
    }

    args(arguments)
    jvmArgs(jvmArguments)
}

runServer {
    args(arguments)
    jvmArgs(jvmArguments)
}

// The gradle metadata includes all of the additional deps that we disabled from POM generation (including forgeBin with no groupID),
// and isn't strictly needed with the POM so just disable it.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact source: devJar, classifier: "dev"

            groupId = System.getenv("ARTIFACT_GROUP_ID") ?: "com.github.GTNewHorizons"
            artifactId = System.getenv("ARTIFACT_ID") ?: project.name
            // Using the identified version, not project.version as it has the prepended 1.7.10
            version = System.getenv("RELEASE_VERSION") ?: modVersion

            // remove extra garbage from who knows where
            pom.withXml {
                def badPomGroup = ['net.minecraft', 'com.google.code.findbugs', 'org.ow2.asm', 'com.typesafe.akka', 'com.typesafe', 'org.scala-lang',
                                   'org.scala-lang.plugins', 'net.sf.jopt-simple', 'lzma', 'com.mojang', 'org.apache.commons', 'org.apache.httpcomponents',
                                   'commons-logging', 'java3d', 'net.sf.trove4j', 'com.ibm.icu', 'com.paulscode', 'io.netty', 'com.google.guava',
                                   'commons-io', 'commons-codec', 'net.java.jinput', 'net.java.jutils', 'com.google.code.gson', 'org.apache.logging.log4j',
                                   'org.lwjgl.lwjgl', 'tv.twitch', 'org.jetbrains.kotlin', '']
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    badPomGroup.contains(it.groupId.text())
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    repositories {
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases"
            credentials {
                username = System.getenv("MAVEN_USER") ?: "NONE"
                password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
            }
        }
    }
}

// Helper methods

def checkPropertyExists(String propertyName) {
    if (project.hasProperty(propertyName) == false) {
        throw new GradleException("This project requires a property \"" + propertyName + "\"! Please add it your \"gradle.properties\". You can find all properties and their description here: https://github.com/GTNewHorizons/ExampleMod1.7.10/blob/main/gradle.properties")
    }
}

def getFile(String relativePath) {
    return new File(projectDir, relativePath)
}

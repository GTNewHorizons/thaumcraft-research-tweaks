/* DO NOT OVERWRITE THIS WITH THE UNIFIED BUILDSCRIPT IT DOESN'T HANDLE KOTLIN MIXINS */

import org.gradle.internal.logging.text.StyledTextOutput
import org.gradle.internal.logging.text.StyledTextOutputFactory
import org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
    repositories {
        maven {
            name = 'Overmind forge repo mirror'
            url = 'https://gregtech.overminddl1.com/'
        }
        maven {            
            name = 'forge'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name = 'jitpack'
            url = 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.7.1'
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'  version ('1.6.10')
    id 'org.jetbrains.kotlin.kapt' version ('1.6.10')
    id 'com.palantir.git-version'  version ('0.13.0')
}

apply plugin: 'forge'

// Pulls version first from the VERSION env and then git tag
String identifiedVersion
String versionOverride = System.getenv("VERSION") ?: null
try {
    identifiedVersion = versionOverride == null ? gitVersion() : versionOverride
}
catch (Exception e) {
    out.style(Style.Failure).text(
            'This mod must be version controlled by Git AND the repository must provide at least one tag,\n' +
            'or the VERSION override must be set! ').style(Style.SuccessHeader).text('(Do NOT download from GitHub using the ZIP option, instead\n' +
            'clone the repository, see ').style(Style.Info).text('https://gtnh.miraheze.org/wiki/Development').style(Style.SuccessHeader).println(' for details.)'
    )
    versionOverride = 'NO-GIT-TAG-SET'
    identifiedVersion = versionOverride
}
version = project.minecraft.version + '-' + identifiedVersion
String modVersion = identifiedVersion

if( identifiedVersion.equals(versionOverride) ) {
    out.style(Style.Failure).text('Override version to ').style(Style.Identifier).text(modVersion).style(Style.Failure).println('!\7')
}

group = "elan.tweaks.thaumcraft.research"
archivesBaseName = modId

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

apply from: 'repositories.gradle'

apply from: 'dependencies.gradle'

test {
    useJUnitPlatform()
}

// Minecraft
minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    replaceIn 'ThaumcraftResearchTweaks.kt'
    replace 'GRADLETOKEN_VERSION', modVersion
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "minecraftVersion": project.minecraft.version,
                "modVersion": modVersion,
                "modId": modId,
                "modName": modName
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("dev")
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

artifacts {
    archives devJar
    archives sourcesJar
}

// Mixins
repositories {
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    kapt("org.spongepowered:mixin:0.8-SNAPSHOT") // using 0.8 to workaround a issue in 0.7 which fails mixin application
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "gson"
        exclude module: "commons-io"
        exclude module: "log4j-core"
    }

    compile "com.github.GTNewHorizons:SpongeMixins:1.3.3:dev"
}

def mixinConfigJson = "mixins.${modId}.json"
def mixingConfigRefMap = "mixins.${modId}.refmap.json"
def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + mixingConfigRefMap
def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes([
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : mixinConfigJson,
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod"             : true
        ])
    }
    getArchiveAppendix().value("${project.minecraft.version}")
}

reobf {
    addExtraSrgFile mixinSrg
}

kapt {
    correctErrorTypes = true
    javacOptions {
        option("-AreobfSrgFile=${tasks.reobf.srg}")
        option("-AoutSrgFile=$mixinSrg")
        option("-AoutRefMapFile=$refMap")
    }
}

afterEvaluate {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

runClient {
    def playerUserName = System.env.PLAYER_USER_NAME
    if (playerUserName == null)  {
        playerUserName = 'Developer'
    }

    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker",
            // Having mixin in the same jar as normal mode makes FML ignore it.
            // It should be fine in production, however I suppose it's not properly read here.
            // The only option which worked for me was adding it as a mod explicitly via next argument:
            "--mods=../build/libs/$modId-${project.minecraft.version}-${modVersion}.jar",
            "--username", playerUserName

}

runServer {
    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker",
            // Having mixin in the same jar as normal mode makes FML ignore it.
            // It should be fine in production, however I suppose it's not properly read here.
            // The only option which worked for me was adding it as a mod explicitly via next argument:
            "--mods=../build/libs/$modId-${project.minecraft.version}-${modVersion}.jar"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact source: devJar, classifier: "dev"

            groupId = System.getenv("ARTIFACT_GROUP_ID") ?: "com.github.GTNewHorizons"
            artifactId = System.getenv("ARTIFACT_ID") ?: project.name
            // Using the identified version, not project.version as it has the prepended 1.7.10
            version = System.getenv("RELEASE_VERSION") ?: modVersion

            // remove extra garbage from who knows where
            pom.withXml {
                def badPomGroup = ['net.minecraft', 'com.google.code.findbugs', 'org.ow2.asm', 'com.typesafe.akka', 'com.typesafe', 'org.scala-lang',
                                   'org.scala-lang.plugins', 'net.sf.jopt-simple', 'lzma', 'com.mojang', 'org.apache.commons', 'org.apache.httpcomponents',
                                   'commons-logging', 'java3d', 'net.sf.trove4j', 'com.ibm.icu', 'com.paulscode', 'io.netty', 'com.google.guava',
                                   'commons-io', 'commons-codec', 'net.java.jinput', 'net.java.jutils', 'com.google.code.gson', 'org.apache.logging.log4j',
                                   'org.lwjgl.lwjgl', 'tv.twitch', '']
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    badPomGroup.contains(it.groupId.text())
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    repositories {
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases"
            credentials {
                username = System.getenv("MAVEN_USER") ?: "NONE"
                password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
            }
        }
    }
}
